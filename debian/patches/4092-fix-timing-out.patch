From 3550698bf8c0f5b1f3459dfe9e47adaaa3cbdf17 Mon Sep 17 00:00:00 2001
From: Martin Kroeker <martin@ruby.chemie.uni-freiburg.de>
Date: Mon, 19 Jun 2023 15:04:17 +0200
Subject: [PATCH 1/4] Use a smaller GEMM workload on RISCV targets

---
 utest/test_fork.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/utest/test_fork.c b/utest/test_fork.c
index bd531e7fb8..0667160587 100644
--- a/utest/test_fork.c
+++ b/utest/test_fork.c
@@ -67,7 +67,11 @@ CTEST(fork, safety)
 #ifndef BUILD_DOUBLE
 exit(0);
 #else
+#ifndef ARCH_RISCV64
     blasint n = 1000;
+#else
+    blasint n = 100;
+#endif   
     int i;
 
     double *a, *b, *c, *d;

From 61153f2c1fbc8e3f85ad43e97e71f7b2883fc2f9 Mon Sep 17 00:00:00 2001
From: Martin Kroeker <martin@ruby.chemie.uni-freiburg.de>
Date: Mon, 19 Jun 2023 17:50:12 +0200
Subject: [PATCH 2/4] Disable the bigger POTRS test on RISCV64 for now

---
 utest/test_potrs.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/utest/test_potrs.c b/utest/test_potrs.c
index f39287d6f3..57c34667a0 100644
--- a/utest/test_potrs.c
+++ b/utest/test_potrs.c
@@ -40,6 +40,7 @@ void BLASFUNC(zpotrs_(char*, BLASINT*, BLASINT*, complex double*,
 */
 
 //https://github.com/xianyi/OpenBLAS/issues/695
+#ifndef ARCH_RISCV64
 CTEST(potrf, bug_695){
 
   openblas_complex_float A1[100] = 
@@ -398,6 +399,7 @@ CTEST(potrf, bug_695){
   }
 #endif
 }
+#endif
 
 // Check potrf factorizes a small problem correctly
 CTEST(potrf, smoketest_trivial){

From 0f87ed26826c2b3ac2d330dd400339fc5e6e0257 Mon Sep 17 00:00:00 2001
From: Martin Kroeker <martin@ruby.chemie.uni-freiburg.de>
Date: Thu, 22 Jun 2023 15:13:19 +0200
Subject: [PATCH 3/4] Disable all of test_potrs.c on RISCV for now

---
 utest/test_potrs.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/utest/test_potrs.c b/utest/test_potrs.c
index 57c34667a0..3613eefc37 100644
--- a/utest/test_potrs.c
+++ b/utest/test_potrs.c
@@ -399,7 +399,7 @@ CTEST(potrf, bug_695){
   }
 #endif
 }
-#endif
+
 
 // Check potrf factorizes a small problem correctly
 CTEST(potrf, smoketest_trivial){
@@ -571,3 +571,4 @@ CTEST(potrf, smoketest_trivial){
     }
   }
 }
+#endif

From 65cb23007f9deed0d9acf51d18a83b24d6a48903 Mon Sep 17 00:00:00 2001
From: Martin Kroeker <martin@ruby.chemie.uni-freiburg.de>
Date: Thu, 22 Jun 2023 17:30:43 +0200
Subject: [PATCH 4/4] Fix failures to handle increments of zero

---
 kernel/riscv64/rot_vector.c   | 1 +
 kernel/riscv64/swap_vector.c  | 1 +
 kernel/riscv64/zrot_vector.c  | 1 +
 kernel/riscv64/zswap_vector.c | 1 +
 4 files changed, 4 insertions(+)

diff --git a/kernel/riscv64/rot_vector.c b/kernel/riscv64/rot_vector.c
index 43a65e552a..f3786e1d0c 100644
--- a/kernel/riscv64/rot_vector.c
+++ b/kernel/riscv64/rot_vector.c
@@ -155,6 +155,7 @@ int CNAME(BLASLONG n, FLOAT *x, BLASLONG inc_x, FLOAT *y, BLASLONG inc_y, FLOAT
                 }
         }else{
                 gvl = VSETVL(n);
+		if (inc_x == 0 && inc_y == 0) gvl = VSETVL(1);
                 BLASLONG stride_x = inc_x * sizeof(FLOAT);
                 BLASLONG stride_y = inc_y * sizeof(FLOAT);
                 BLASLONG inc_xv = inc_x * gvl;
diff --git a/kernel/riscv64/swap_vector.c b/kernel/riscv64/swap_vector.c
index b165928088..82fa5ce315 100644
--- a/kernel/riscv64/swap_vector.c
+++ b/kernel/riscv64/swap_vector.c
@@ -136,6 +136,7 @@ int CNAME(BLASLONG n, BLASLONG dummy0, BLASLONG dummy1, FLOAT dummy3, FLOAT *x,
                 }
         }else{
                 gvl = VSETVL(n);
+                if (inc_x == 0 && inc_y == 0) gvl = VSETVL(1);
                 stride_x = inc_x * sizeof(FLOAT);
                 stride_y = inc_y * sizeof(FLOAT);
                 if(gvl <= n/2){
diff --git a/kernel/riscv64/zrot_vector.c b/kernel/riscv64/zrot_vector.c
index 858dfd1732..727d13a87b 100644
--- a/kernel/riscv64/zrot_vector.c
+++ b/kernel/riscv64/zrot_vector.c
@@ -112,6 +112,7 @@ int CNAME(BLASLONG n, FLOAT *x, BLASLONG inc_x, FLOAT *y, BLASLONG inc_y, FLOAT
 		}
 		
 	}else{
+                if (inc_x == 0 && inc_y == 0) gvl = VSETVL(1);
 		for(i=0,j=0; i < n/gvl; i++){
 			vx0 = VLSEV_FLOAT(&x[ix], stride_x, gvl);
 			vx1 = VLSEV_FLOAT(&x[ix+1], stride_x, gvl);
diff --git a/kernel/riscv64/zswap_vector.c b/kernel/riscv64/zswap_vector.c
index c1dcaccab6..09cc8992a9 100644
--- a/kernel/riscv64/zswap_vector.c
+++ b/kernel/riscv64/zswap_vector.c
@@ -81,6 +81,7 @@ int CNAME(BLASLONG n, BLASLONG dummy0, BLASLONG dummy1, FLOAT dummy3, FLOAT dumm
                 }
         }else{
                 gvl = VSETVL(n);
+                if (inc_x == 0 && inc_y == 0) gvl = VSETVL(1);
                 stride_x = inc_x * 2 * sizeof(FLOAT);
                 stride_y = inc_y * 2 * sizeof(FLOAT);
                 BLASLONG inc_xv = inc_x * gvl * 2;
